// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/wallets/repository/contract.go
//
// Generated by this command:
//
//	mockgen -source=internal/modules/wallets/repository/contract.go -destination=internal/modules/wallets/repository/mocks/mock_wallet_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/abdussalamfaqih/wallet-service-dev/internal/modules/wallets/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
	isgomock struct{}
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockWalletRepository) CreateAccount(ctx context.Context, payload repository.DepositPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockWalletRepositoryMockRecorder) CreateAccount(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockWalletRepository)(nil).CreateAccount), ctx, payload)
}

// GetAccount mocks base method.
func (m *MockWalletRepository) GetAccount(ctx context.Context, accountID int) (repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID)
	ret0, _ := ret[0].(repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockWalletRepositoryMockRecorder) GetAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockWalletRepository)(nil).GetAccount), ctx, accountID)
}

// SubmitTransaction mocks base method.
func (m *MockWalletRepository) SubmitTransaction(ctx context.Context, payload repository.TransactionPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransaction", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitTransaction indicates an expected call of SubmitTransaction.
func (mr *MockWalletRepositoryMockRecorder) SubmitTransaction(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockWalletRepository)(nil).SubmitTransaction), ctx, payload)
}
